import urljoin from 'url-join';
import * as dirTree from "./dirTree";


// This should be called whenever an element with potential to resize the main content column is loaded/ filled. Eg. Spreadsheets.
export function setupSidebarToggle() {
    let sidebarBounds = document.querySelector("#sidebarBody").getBoundingClientRect();
    let mainBounds = document.querySelector("main").getBoundingClientRect();
    // console.debug(mainBounds, sidebarBounds);

    if (mainBounds.y > sidebarBounds.y + sidebarBounds.height) {
        // Main content box is way below the sidebar. Let's close it. 
        document.querySelector("[id='sidebarToggleLink']").parentNode.removeAttribute("open");
    }
}

export function sidebarToggleHandler() {
    // Acual collapsing/ expanding happens elsewhere in some library function. 
    let expanded = document.querySelector("[id='sidebarToggleLink']").parentNode.hasAttribute("open");
    // console.debug(expanded);
    if (expanded) {
        document.querySelector("[name='contentRow']").setAttribute("class", "col");
    } else {
        document.querySelector("[name='contentRow']").setAttribute("class", "row");
    }
}

function getTitle(sidebarItem) {
    var title = sidebarItem.title;

    // console.debug(sidebarItem);
    let itemUrlStripped = "#";
    let isDirItem = false;
    if (sidebarItem.url) {
        itemUrlStripped = sidebarItem.url;
    } else if (sidebarItem.contents && sidebarItem.contents[0].url) {
        itemUrlStripped = sidebarItem.contents[0].url.replace("recdir://", "/").replace("dir://", "/");
        isDirItem = true;
    }
    let pageParams = dirTree.getPageParams(itemUrlStripped);

    if (!title) {
        // console.debug(sidebarItem, childTree);
        if ("title" in pageParams) {
            title = pageParams["title"];
            if (title.startsWith("+")) {
                // /x/y/z/_index.md is not a dir item, but /x/y/z is (if /x/y/z/a exists). The former should retain a +, the latter entry should not.
                if (isDirItem) {
                    title = title.substr(1);
                } else {
                    // /x/y/z/_index.md is not a dir item. if /x/y/z/a does not exist, it should drop a + mark.
                    let childTree = dirTree.getChildTree(itemUrlStripped);
                    if (pageParams["logicalName"] == "_index.md" && Object.keys(childTree).length == 1) {
                        title = title.substr(1);

                    }
                    // console.debug(pageParams);
                }
            }
        } else {
            console.error(itemUrlStripped, `${itemUrlStripped} not present in dir tree. Something is wrong with the sidebar definition. So can't figure out title.`, sidebarItem);
            title = "UNK";
        }
    }
    if (pageParams.lastmod) {
        title = `${pageParams.lastmod.split('T')[0]} ${title}`;
    }
    return title;
}

function titleSorter(a, b) {
    return getTitle(a).localeCompare(getTitle(b));
}

function getHtmlForContentsProperty(sidebarItem, parentListIdIn, anchorClasses, liClass) {
    let finalUrl = sidebarItem.url || "#";
    var itemUrlStripped = finalUrl;
    var parentListId = parentListIdIn || "sb";
    var contentHtml = "";
    var title = getTitle(sidebarItem);
    let ulClass = "list pl2";

    // If the listId included devanAgarI characters, collapsing and uncollapsing would not work for some unknown reason. So, we use random numbers as ids.
    var listId = `${parentListId}_${Math.floor(Math.random() * 10000)}`;
    if (sidebarItem.contents == undefined) {
        console.error(`sidebarItem without contents ${title} ${finalUrl}`);
        return "ERROR_IN_YML";
    }
    for (let subitem of sidebarItem.contents) {
        contentHtml = `${contentHtml}\n ${getSidebarItemHtml(subitem, listId)}`;
    }
    // console.debug(title, itemUrlStripped);
    var itemTitleHtml;
    if (itemUrlStripped != "#") {
        itemTitleHtml = `<a href="${finalUrl}" class="${anchorClasses}"> ${title}</a>`;
    } else {
        itemTitleHtml = `${title}`;
    }
    var itemHtml =
        `<details class="sidebar">` +
        `<summary>${itemTitleHtml} </summary>` +
        "\n" +
        `<ul id='${listId}' class='${ulClass}'>${contentHtml}\n</ul>\n` +
        `</details>\n`;
    return itemHtml;
}

function getHtmlForDirProperty(sidebarItem) {
    var itemHtml = "";
    // console.debug(sidebarItem);
    var dirUrl = sidebarItem.url.replace("dir://", "/").replace("//", "/");
    if (!dirUrl.endsWith("/")) {
        dirUrl = dirUrl + "/";
    }
    // console.debug(dirUrl);
    // Note that only pages parsed and generated by jekyll are processed below - not ready files like pdf-s and htmls.
    let childTree = dirTree.getChildTree(dirUrl);
    if (Object.keys(childTree).length == 0) {
        console.error(`Directory ${dirUrl} not found!`);
    }
    // Not sorting as it comes presorted by title.
    var childPages = dirTree.getNonDirPageKeys(childTree);
    // console.debug(childPages);
    let childPageItems = childPages.map(x => {
        return {"url": `${dirUrl}${x}/`}
    });
    childPageItems = childPageItems.map(x => {
        return {"title": getTitle(x), "url": x.url}
    })
    // console.debug(dirUrl, childTree, childPages,childPageItems);
    let subitem = {"url": dirUrl};
    itemHtml = `${itemHtml}\n${getSidebarItemHtml(subitem)}`;
    for (let childPageItem of childPageItems) {
        itemHtml = `${itemHtml}\n${getSidebarItemHtml(childPageItem)}`;
    }
    if (childPages.length == 0) {
        // console.warn(`Directory ${dirUrl} has only one item.`, childPages, childTree);
    }
    return itemHtml;
}

function getHtmlForRecdirProperty(sidebarItem, childDirsSuperset) {
    var itemHtml = "";
    var dirUrl = sidebarItem.url.replace("recdir://", "/");
    if (!dirUrl.endsWith("/")) {
        dirUrl = dirUrl + "/";
    }

    let subitem = {"url": dirUrl};
    itemHtml = `${itemHtml}\n${getSidebarItemHtml(subitem)}`;

    let childTree = dirTree.getChildTree(dirUrl);
    var childPageKeys = dirTree.getPageKeys(childTree);
    if (dirUrl == "/") {
        let excluded_keys = ["tags", "categories"];
        childPageKeys = childPageKeys.filter((key) => !excluded_keys.includes(key));
    }
    let childPageItems = childPageKeys.map(x => {
        if (dirTree.isDirKey(childTree, x)) {
            return {"contents": [{"url": `recdir:/${dirUrl}${x}/`}]};
        } else {
            return {"url": `/${dirUrl}${x}/`};
        }
    });
    // console.debug(childDirs);
    for (let childItem of childPageItems.sort(titleSorter)) {
        itemHtml = `${itemHtml}\n${getSidebarItemHtml(childItem)}`;
    }
    return itemHtml;
}


function getSidebarItemHtml(sidebarItem, parentListIdIn, liClassesIn, anchorClassesIn) {
    let finalUrl = sidebarItem.url || "#";
    var itemUrlStripped = finalUrl;
    let isExternalLink = finalUrl.startsWith("http") || finalUrl.startsWith("ftp");

    if (!isExternalLink) {
        itemUrlStripped = itemUrlStripped.replace("_index.md.html", "").replace("_index.md.md", "").replace(".md", "/").replace("//", "/");
        finalUrl = urljoin(baseURL, itemUrlStripped);
    }

    let anchorClasses = anchorClassesIn || "";
    var liClass = liClassesIn || "inactive";  // list-group-item-* is a bootstrap class.
    if (pageVars.pageUrlMinusBasePath == itemUrlStripped) {
        liClass = "active underline";
    }

    // if (itemUrlStripped.includes("mImAMsA")) { // For debugging
    //     console.debug(itemUrlStripped, pageUrlMinusBasePath, sidebarItem);
    // }
    if (sidebarItem.hasOwnProperty("contents")) {
        return getHtmlForContentsProperty(sidebarItem, parentListIdIn, anchorClasses, liClass);
    }
    if (!sidebarItem.url) {
        console.error("Strange sidebarItem with no url or contents fields!", sidebarItem);
        return "";
    }
    if (sidebarItem.url.startsWith("dir://")) {
        return getHtmlForDirProperty(sidebarItem);
    }
    if (sidebarItem.url.startsWith("recdir://")) {
        return getHtmlForRecdirProperty(sidebarItem);
    }

    // Finally, the default case.
    // console.debug(baseURL +itemUrlStripped);
    var title = getTitle(sidebarItem);
    var itemHtml = `<li class="${liClass}"><a href="${finalUrl}"  class="${anchorClasses}" target="">${title}</a></li>`;
    return itemHtml;
}

export function insertSidebarItems() {
    var sidebar = {"contents": [{"url": "recdir://"}]};
    if (pageVars.sidebarId) {
        sidebar = sidebarsData[pageVars.sidebarId];
    } else {
        console.warn("pageVars.sidebarId is undefined. Using a default page enumeration.", pageVars.sidebarId);
    }
    // $("#sidebarTitle a").html(sidebar.title);
    // console.debug(sidebar);
    if (document.querySelectorAll("#sidebarBody li").length > 0) {
        console.warn("Exiting without reinserting items.");
        return;
    }

    for (let sidebarItem of sidebar.contents) {
        document.getElementById("sidebarBody").insertAdjacentHTML('beforeend', getSidebarItemHtml(sidebarItem));
    }

    // this highlights the active parent class in the navgoco sidebar. this is critical so that the parent expands when you're viewing a page.
    let activeLeaf = document.querySelector("#sidebarBody li.active");
    while (activeLeaf) {
        if (activeLeaf.tagName && activeLeaf.tagName.toLowerCase() == "details") {
            activeLeaf.setAttribute("open", '');
            activeLeaf.querySelector("summary").setAttribute("class", "active underline");
        }
        activeLeaf = activeLeaf.parentNode;
    }
}

export function insertNavItems(navbarId, items) {
    if (items === undefined) {
        return;
    }
    console.debug(items);
    let isIterable = typeof items[Symbol.iterator] === 'function';
    let element = document.getElementById(navbarId);

    if (!element.getAttribute("addedCustomItems") && isIterable) {
        // console.debug(topnavDropdown);
        for (let item of items) {
            var sidebarItemHtml = getSidebarItemHtml(item, null, "list-group-item list-group-item-dark");
            element.insertAdjacentHTML('beforeend', sidebarItemHtml);
        }
        element.setAttribute("addedCustomItems", "true");
    }
}
